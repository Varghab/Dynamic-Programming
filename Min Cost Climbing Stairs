class Solution {
public:
    int solve(vector<int>& cost,int n, vector<int>&dp){
        if(n==0||n==1)return cost[n];
        if(n<0)return 0;
        if(dp[n]!=-1)return dp[n];
        dp[n] = cost[n] + min(solve(cost,n-1,dp),solve(cost, n-2, dp));
        return dp[n];
    }

    int minCostClimbingStairs(vector<int>& cost){
        // vector<int>dp(cost.size()+1,-1);
        // return min(solve(cost,cost.size()-1,dp), solve(cost, cost.size()-2,dp));

        // Tabulation starts here...
        // int n = cost.size();
        // vector<int>dp(n+1);
        // dp[0] = cost[0];
        // dp[1] = cost[1];
        // for(int i=2;i<n;i++){
        //     dp[i] = cost[i] + min(dp[i-1],dp[i-2]);
        // }
        // return min(dp[n-1],dp[n-2]);

        //Space optimization
        int n = cost.size();
        if(n==1) return cost[n];
        int prev1 = cost[0];
        int prev2 = cost[1];
        for(int i=2;i<n;i++){
            int curr = cost[i] + min(prev2,prev1);
            prev1 = prev2;
            prev2 = curr;            
        }
        return min(prev2,prev1);


    }
};
