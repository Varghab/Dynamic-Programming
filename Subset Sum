class Solution{   
public:
    // Recursion + Memoizaton
    bool solve(vector<int>& arr, int sum, int n, vector<vector<int>>& dp) {
        if (n == 0 && sum==0) return true;
        if (sum == 0) return true;
        if (n == 0) return false;
        if (dp[n][sum] != -1)
            return dp[n][sum];
            
        if (arr[n - 1] <= sum) {
            dp[n][sum] = solve(arr, sum - arr[n - 1], n - 1, dp) || solve(arr, sum, n - 1, dp);
        } else {
            dp[n][sum] = solve(arr, sum, n - 1, dp);
        }
        return dp[n][sum];
    }

    bool isSubsetSum(vector<int> arr, int sum) {
        // Tabulation
        int n = arr.size();
        vector<vector<bool>> dp(n + 1, vector<bool>(sum + 1));
        for(int i=0;i<n+1;i++){
            for(int j=0;j<sum+1;j++){
                if(j==0)dp[i][j] = true;
                else if(i==0&&j>0)dp[i][j]=false;
            }
        }
        
        for(int i=1;i<n+1;i++){
            for(int j=1;j<sum+1;j++){
                if(arr[i-1]<=j){
                    dp[i][j] = dp[i-1][j] || dp[i-1][j-arr[i-1]];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[n][sum];
        
    }
};
